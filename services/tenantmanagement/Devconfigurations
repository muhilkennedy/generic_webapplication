Spring boot - latest
-----------
https://start.spring.io/
mvn clean install
mvn spring-boot:run
java -jar /path to target jar file


Angular setup:
-------------
https://angular.io/cli
Angular/cli - latest
npm install -g @angular/cli
ng build
ng serve
Node / npm  - v12+
https://nodejs.org/en/download/
npm install
npm start


MYSQL setup:
------------
https://dev.mysql.com/downloads/
community server
community workbench(optional)


Redis setup:(enable redis in app property)
------------
https://redis.io/docs/getting-started/installation/install-redis-on-mac-os/
brew install redis
to start cmd -> redis-server
(or) use embedded redis for easy usage


Jenkins setup:
-------------


Docker setup:
-------------
https://www.docker.com/
docker ps


Hashi vault setup:(optional)
------------------
https://www.vaultproject.io/downloads
brew install vault
start vault server -> vault server --dev --dev-root-token-id="00000000-0000-0000-0000-000000000000"
open new terminal:
export export VAULT_TOKEN="00000000-0000-0000-0000-000000000000"
export VAULT_ADDR="http://127.0.0.1:8200"
vault kv put secret/TENANTMANAGER db.password=demouser
vault kv get secret/TENANTMANAGER

DevOps Hashi Vaukt Setup for windows:
Once downloaded hashi vault for windows execute the below command on the path downloaded 
vault.exe
vault server --dev --dev-root-token-id="00000000-0000-0000-0000-000000000000"
set VAULT_ADDR=http://127.0.0.1:8200
set VAULT_TOKEN=00000000-0000-0000-0000-000000000000
vault kv put secret/TENANTMANAGEMENT db.password=root@123 db.username=root
vault kv put secret/TENANTMANAGEMENT db.username=root

Remove Vault token from application.properties (to be taken care during deployment)
Simply remove spring.cloud.vault.token from application.properties and 
instead provide it via system property -Dspring.cloud.vault.token=00000000-0000-0000-0000-000000000000 (when starting the application) 
or environment variable SPRING_CLOUD_VAULT_TOKEN. Environment variable is especially convenient if you use containers (Docker or Kubernetes).


hashi consul setup:(optional)
-------------------
https://www.consul.io/downloads
for mac:
brew tap hashicorp/tap
brew install hashicorp/tap/consul
sart consul:
consul agent -server -bootstrap-expect=1 -data-dir=consul-data -ui -bind=<Local_IP_addr>
http://localhost:8500/ui

setup consul auth:
create temp dir for consul config files
mkdir consul.d
vi agent.hcl
acl = {
  enabled = true
  default_policy = "deny"
  enable_token_persistence = true
}

consul acl bootstrap
consul agent -server -bootstrap-expect=1 -data-dir=consul-data -config-dir=consul.d -ui -bind=127.0.0.1
moreinfo below:
https://developer.hashicorp.com/consul/tutorials/security/access-control-setup-production#consul-ui-token


splunk setup:(optional)
-------------


Sonar Qube server:(to check code quality in local)
------------------
sonar docker image https://hub.docker.com/_/sonarqube/
docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9000:9000 sonarqube:latest
localhost:9000 -> uname:admin,pwd:admin
Run maven build on local project:
build jacoco -> mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install
publish report to sonar -> mvn sonar:sonar
(NOTE: incase of auth issue -> go to administration -> security and disable "Force User Authentication")


fail2ban setup:(optional) (prevent DOS attack incase of local server)
--------------
-------------



