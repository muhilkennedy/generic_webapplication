Spring boot - latest
-----------
https://start.spring.io/
mvn clean install
mvn spring-boot:run
java -jar /path to target jar file


Angular setup:
-------------
https://angular.io/cli
Angular/cli - latest
npm install -g @angular/cli
ng build
ng serve
Node / npm  - v12+
https://nodejs.org/en/download/
npm install
npm start


MYSQL setup:
------------
https://dev.mysql.com/downloads/
community server
community workbench(optional)


Redis setup:(enable redis in app property)
------------
https://redis.io/docs/getting-started/installation/install-redis-on-mac-os/
brew install redis
to start cmd -> redis-server
(or) use embedded redis for easy usage


Jenkins setup:
-------------


Docker setup:
-------------
https://www.docker.com/


Hashi vault setup:(optional)
------------------
https://www.vaultproject.io/downloads
brew install vault
start vault server -> vault server --dev --dev-root-token-id="00000000-0000-0000-0000-000000000000"
open new terminal:
export export VAULT_TOKEN="00000000-0000-0000-0000-000000000000"
export VAULT_ADDR="http://127.0.0.1:8200"
vault kv put secret/TENANTMANAGEMENT db.password=demouser
vault kv get secret/TENANTMANAGEMENT

Remove Vault token from application.properties (to be taken care during deployment)
Simply remove spring.cloud.vault.token from application.properties and 
instead provide it via system property -Dspring.cloud.vault.token=00000000-0000-0000-0000-000000000000 (when starting the application) 
or environment variable SPRING_CLOUD_VAULT_TOKEN. Environment variable is especially convenient if you use containers (Docker or Kubernetes).


hashi consul setup:(optional)
-------------------


splunk setup:(optional)
-------------



fail2ban setup:(optional) (prevent DOD attack incase of local server)
--------------
-------------
